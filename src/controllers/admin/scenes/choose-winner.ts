import { Scenes } from 'telegraf';
import { prisma } from '../../..';
import { SCENES } from '../../../config';
import { errorReply, getUserName, parseActionArgs } from '../../../utils';
import { admMenuAction, admWinnerAction } from '../actions';

export const admChooseWinnerScene = new Scenes.WizardScene(
	SCENES.ADM_CHOOSE_WINNER,
	//@ts-ignore
	async ctx => {
		try {
			ctx.scene.state.args = ctx.scene.session.state.args as any[];
			const args = ctx.scene.state.args;
			const type = args[3];
			const gwId = Number(args[1]);
			const admPage = Number(args[2]);
			const gw = await prisma.giveaway.findUnique({
				where: { id: gwId },
			});
			if (!gw) {
				ctx.scene.leave();
				ctx.reply('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
				return admMenuAction(ctx);
			}
			ctx.scene.state.gw = gw;

			const winners = await prisma.userParticipant.findMany({ where: { giveawayId: gwId, isWinner: true }, include: { user: true } });
			ctx.scene.state.winners = winners;

			if (type === 'add') {
				if (winners.length === gw.winnerCount) {
					ctx.editMessageText('üö´ –ë–æ–ª—å—à–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞—Ç—å –Ω–µ–ª—å–∑—è!');
					ctx.scene.leave();
					admWinnerAction(ctx, [null, ctx.scene.state.args[1], ctx.scene.state.args[2]], true);
					return;
				}

				await ctx.reply(`–í–≤–µ–¥–∏ –∞–π–¥–∏ –ª–∏–±–æ —Ç–µ–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –∏ –º–µ—Å—Ç–æ, —á—Ç–æ –±—ã –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º.\n<code>—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</code>`, {
					parse_mode: 'HTML',
					reply_markup: { inline_keyboard: [[{ text: '–û—Ç–º–µ–Ω–∞', callback_data: `cancel:${gwId}:${admPage}` }]] },
				});
			} else if (type === 'remove') {
				await ctx.reply(
					`${winners
						.map((w, i) => getUserName(w.user) + (w.winnerIndex ? ` - ${w.winnerIndex} –º–µ—Å—Ç–æ` : ''))
						.join('\n')}\n\n–í–≤–µ–¥–∏ –∞–π–¥–∏ –ª–∏–±–æ —Ç–µ–≥, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ, —á—Ç–æ –±—ã —É–±—Ä–∞—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π`,
					{
						reply_markup: { inline_keyboard: [[{ text: '–û—Ç–º–µ–Ω–∞', callback_data: `cancel:${gwId}:${admPage}` }]] },
					}
				);
			}

			return ctx.wizard.next();
		} catch (error) {
			errorReply(ctx);
			console.error(error);
		}
	},
	async ctx => {
		try {
			const args = ctx.scene.state.args;
			const type = args[3];
			const gwId = Number(args[1]);
			const admPage = Number(args[2]);
			const { gw, winners } = ctx.scene.state;

			if (typeof ctx.text !== 'string') return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');

			if (type === 'add') {
				let [value, winnerIndex] = ctx?.text?.split(' ') as [string, number];

				if (winnerIndex && (winnerIndex > gw.winnerCount || winnerIndex < 1)) {
					await ctx.reply('üö´ –ù–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–µ—Å—Ç –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –∏ –º–µ—Å—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è');
					ctx.scene.leave();
					return admWinnerAction(ctx, [null, gwId, admPage], true);
				}
				if (value[0] === '@') value = value.slice(1, value.length);

				let participant = await prisma.userParticipant.findFirst({
					where: {
						OR: [{ user: { id: parseInt(value) ? parseInt(value) : 0 } }, { user: { username: value } }],
						giveawayId: gwId,
					},
					include: { user: true },
				});
				if (participant) {
					participant = await prisma.userParticipant.update({
						where: { id: participant.id },
						data: { isWinner: true, winnerIndex: winnerIndex ? Number(winnerIndex) : null },
						include: { user: true },
					});

					await ctx.reply(
						`‚úÖ ${participant.user.username ? '@' + participant.user.username : participant.user.id} —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º ${winnerIndex ? `–Ω–∞ ${winnerIndex} –º–µ—Å—Ç–æ` : ''}`
					);
				} else {
					await ctx.reply('üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
				}
			} else if (type === 'remove') {
				let value = ctx?.text as string;
				if (value[0] === '@') value = value.slice(1, value.length);

				try {
					let participant = await prisma.userParticipant.findFirst({
						where: {
							OR: [{ id: parseInt(value) ? parseInt(value) : 0 }, { user: { username: value } }],
							giveawayId: gwId,
						},
						include: { user: true },
					});
					if (participant) {
						participant = await prisma.userParticipant.update({ where: { id: participant.id }, data: { isWinner: false }, include: { user: true } });
						await ctx.reply(`‚úÖ ${participant.user.username ? '@' + participant.user.username : participant.user.id} —É–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π`);
					} else {
						await ctx.reply('üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π');
					}
				} catch (error) {
					console.error(error);
				}
			}

			ctx.scene.leave();

			return admWinnerAction(ctx, [null, gwId, admPage], true);
		} catch (error) {
			errorReply(ctx);
			console.error(error);
		}
	}
);

admChooseWinnerScene.action(/^cancel:(.+)/, async ctx => {
	ctx.answerCbQuery().catch(() => {});
	ctx.scene.leave();
	admWinnerAction(ctx, parseActionArgs(ctx));
});
