import { Scenes } from 'telegraf';
import { prisma } from '../../..';
import { SCENES } from '../../../config';
import { errorReply } from '../../../utils';
import { editGwAction, subscriptionGwAction } from '../actions';

export const addSubscriptionScene = new Scenes.WizardScene(
	SCENES.ADD_SUBSCRIPTION,
	//@ts-ignore
	async ctx => {
		try {
			ctx.editMessageText('–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞.\n\n<code>–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!</code>', {
				parse_mode: 'HTML',
				reply_markup: { inline_keyboard: [[{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]] },
			});

			return ctx.wizard.next();
		} catch (error) {
			errorReply(ctx);
			console.error(error);
		}
	},
	async ctx => {
		try {
			const value = parseInt(ctx?.text! ?? '');
			if (!value)
				return ctx.reply('üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç', {
					reply_markup: { inline_keyboard: [[{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]] },
				});

			const location = await prisma.giveawayLocation.findUnique({ where: { id: value } });
			if (!location)
				return ctx.reply('üö´ –¢–∞–∫–æ–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∞', {
					reply_markup: { inline_keyboard: [[{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]] },
				});

			const gwId = Number(ctx.scene.state.args[1]);
			let gw = await prisma.giveaway.findUnique({ where: { id: gwId } });
			if (!gw)
				return ctx.reply('üö´ –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω', {
					reply_markup: { inline_keyboard: [[{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]] },
				});
			gw = await prisma.giveaway.update({ where: { id: gwId }, data: { subscribeLocationIds: [...gw.subscribeLocationIds, value as any] } });

			ctx.scene.leave();
			await ctx.reply('‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
			subscriptionGwAction(ctx, gwId, true);
		} catch (error) {
			errorReply(ctx);
			console.error(error);
		}
	}
);

// addSubscriptionScene.action(/^add/, ctx => {
// 	try {
// 	} catch (error) {
// 		console.error(error);
// 	}
// });

addSubscriptionScene.action(/^cancel/, async ctx => {
	ctx.scene.leave();
	ctx.answerCbQuery();
	//@ts-ignore
	editGwAction(ctx, Number(ctx.scene.session.state.args[1]), true);
});
